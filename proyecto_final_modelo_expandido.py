# -*- coding: utf-8 -*-
"""Proyecto Final: Modelo Expandido.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yglqz85qg1WPwza1M3liNU-uz421FUdm
"""

import matplotlib.pyplot as plt
import random as r
import math as m

pos_i = (0,0)

# Definimos la funcion generadora de la parcela
def my_simulation(size, rho, p, t_max, v):
  # Size es la mitad de la longitud del lado de la parcela
  t = 0
  area = 4*size**2
  tree_amount = area*rho
  lat_states = {}
  for i in range(m.floor(tree_amount)):
    lat_states[(r.uniform(-size,size), r.uniform(-size,size))] = "U"
  lat_states[pos_i] = "F"
  lat_states_before = dict(lat_states)

  # Simulamos el incendio
  while t < t_max:
    for j in lat_states_before.keys():
      if lat_states_before[j] == "F":
        for k in lat_states.keys():
          if lat_states[k] == "U":
            dist = m.sqrt((k[0]-j[0])**2 + (k[1]-j[1])**2)
            if dist <= v:
              p_local = (p/dist) / (p/dist - p + 1)
              if r.random() <= p_local:
                lat_states[k] = "F"
        lat_states[j] = "B"
    lat_states_before = dict(lat_states)
    t += 1

  # Esta función retorna un diccionario con las posiciones y estados de cada árbol de la parcela
  return lat_states

# Invocamos la función generadora de la parcela
lat_states = my_simulation(size=50, rho = 1, p=0.6, t_max=30, v=2)
x_U = []
y_U = []
x_F = []
y_F = []
x_B = []
y_B = []

# Clasificamos cada árbol
for lat in lat_states.keys():
  if lat_states[lat] == "U":
    x_U.append(lat[0])
    y_U.append(lat[1])
  elif lat_states[lat] == "F":
    x_F.append(lat[0])
    y_F.append(lat[1])
  else:
    x_B.append(lat[0])
    y_B.append(lat[1])

# Generamos la imagen de la parcela
plt.figure(figsize=(8,8))
plt.title("Simulación de Incendio - Modelo Definitivo")
plt.plot(x_U, y_U, "g.")
plt.plot(x_F, y_F, "r.")
plt.plot(x_B, y_B, "k.")
plt.plot(pos_i[0], pos_i[1], "yo")
plt.savefig("fig_8.png")
plt.show()

plt.figure(figsize=(16,16))
plt.tight_layout()

for k in range(1,5):
  rho = 1-(k-1)*0.25
  lat_states = my_simulation(size=50, rho = rho, p=1, t_max=30, v=2)
  x_U = []
  y_U = []
  x_F = []
  y_F = []
  x_B = []
  y_B = []

  # Clasificamos cada árbol
  for lat in lat_states.keys():
    if lat_states[lat] == "U":
      x_U.append(lat[0])
      y_U.append(lat[1])
    elif lat_states[lat] == "F":
      x_F.append(lat[0])
      y_F.append(lat[1])
    else:
      x_B.append(lat[0])
      y_B.append(lat[1])

  # Generamos la imagen de la parcela
  plt.subplot(2, 2, k)
  plt.plot(x_U, y_U, "g.")
  plt.plot(x_F, y_F, "r.")
  plt.plot(x_B, y_B, "k.")
  plt.plot(pos_i[0], pos_i[1], "yo")
  plt.title(f"rho = {rho}")

plt.savefig("fig_9.png")
plt.show()